package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	_ "github.com/go-sql-driver/mysql"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

//a port
const portPub string = ":8080"

func main() {
	http.HandleFunc("/", getMes) // store data to mysql and push sametime
	// http.HandleFunc("/getMessage", handle(){ get data from mysql})// get data from mysql by set fillter

	err := http.ListenAndServe(portPub, nil)
	if err != nil {
		log.Fatalf("listenandserver error: %s", err)
		return
	}
}

//obtain the message from yueque by webhook
//then instore mysql
//then enter next
func getMes(w http.ResponseWriter, r *http.Request) {
	data, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Fatalf("ioutil error:%s", err)
	}

	autoGenerated := &AutoGenerated{}

	err = json.Unmarshal(data, &autoGenerated)
	if err != nil {
		log.Fatalf("unmarshal error:%s", err)
	}

	fmt.Println("---------new--------")
	fmt.Println(autoGenerated.Data.Title)
	fmt.Println(autoGenerated.Data.User.Name)

	stra := "https://www.yuque.com/" + autoGenerated.Data.Path
	fmt.Println(stra)

	title := autoGenerated.Data.Title
	name := autoGenerated.Data.User.Name
	path := stra

	db, err := sql.Open("mysql", "root:123456@tcp(127.0.0.1:3306)/YQ")
	if err != nil {
		log.Fatalf("sql.Open error: %s\n", err)
	}

	stmt, err := db.Prepare("INSERT user_info SET title=?,name=?,path=?")
	if err != nil {
		log.Fatalf("db.Prepare error: %s\n", err)
	}

	_, err = stmt.Exec(title, name, path)
	if err != nil {
		log.Fatalf("stmt.Exec error: %s\n", err)
	}

	startBot()
}

//with input, you could get kinds of message
//get - latest update message
//name - name's latest update message(with date)
func inputGetMes(bot *tgbotapi.BotAPI) {
	db, err := sql.Open("mysql", "root:123456@tcp(127.0.0.1:3306)/YQ")
	if err != nil {
		log.Fatalf("sql.Open error: %s\n", err)
	}

	rows, err := db.Query("SELECT * FROM user_info")
	if err != nil {
		log.Fatalf("db.Query error: %s\n", err)
	}

	var id int
	var title string
	var name string
	var path string

	for rows.Next() {
		err = rows.Scan(&id, &title, &name, &path)
		if err != nil {
			log.Fatalf("rows.Scan error: %s\n", err)
		}
	}

	u := tgbotapi.NewUpdate(0)
	// u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil { // ignore any non-Message Updates
			continue
		} else if update.Message.Text == "get" {
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, title+"\n"+name+"\n"+path+"\n")
			msg.ReplyToMessageID = update.Message.MessageID

			bot.Send(msg)
		} else {
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "please input “get” in order to getupdate messages")
			msg.ReplyToMessageID = update.Message.MessageID

			bot.Send(msg)
		}
	}
}

//send update message continuously
func autoGetMes(bot *tgbotapi.BotAPI) {

}

//a bot to do things
func startBot() {
	bot, err := tgbotapi.NewBotAPI("996518758:AAGU29DSWvGSqCO4yrR2pcOzcJGAZ9fn4JM")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true

	go inputGetMes(bot)
}

//AutoGenerated is a type of message
type AutoGenerated struct {
	Data struct {
		ID     int    `json:"id"`
		Slug   string `json:"slug"`
		Title  string `json:"title"`
		BookID int    `json:"book_id"`
		Book   struct {
			ID               int         `json:"id"`
			Type             string      `json:"type"`
			Slug             string      `json:"slug"`
			Name             string      `json:"name"`
			UserID           int         `json:"user_id"`
			Description      string      `json:"description"`
			CreatorID        int         `json:"creator_id"`
			Public           int         `json:"public"`
			ItemsCount       int         `json:"items_count"`
			LikesCount       int         `json:"likes_count"`
			WatchesCount     int         `json:"watches_count"`
			ContentUpdatedAt time.Time   `json:"content_updated_at"`
			UpdatedAt        time.Time   `json:"updated_at"`
			CreatedAt        time.Time   `json:"created_at"`
			User             interface{} `json:"user"`
			Serializer       string      `json:"_serializer"`
		} `json:"book"`
		UserID int `json:"user_id"`
		User   struct {
			ID               int         `json:"id"`
			Type             string      `json:"type"`
			Login            string      `json:"login"`
			Name             string      `json:"name"`
			Description      interface{} `json:"description"`
			AvatarURL        string      `json:"avatar_url"`
			LargeAvatarURL   string      `json:"large_avatar_url"`
			MediumAvatarURL  string      `json:"medium_avatar_url"`
			SmallAvatarURL   string      `json:"small_avatar_url"`
			BooksCount       int         `json:"books_count"`
			PublicBooksCount int         `json:"public_books_count"`
			FollowersCount   int         `json:"followers_count"`
			FollowingCount   int         `json:"following_count"`
			CreatedAt        time.Time   `json:"created_at"`
			UpdatedAt        time.Time   `json:"updated_at"`
			Serializer       string      `json:"_serializer"`
		} `json:"user"`
		Format           string      `json:"format"`
		Body             string      `json:"body"`
		BodyDraft        string      `json:"body_draft"`
		BodyHTML         string      `json:"body_html"`
		Public           int         `json:"public"`
		Status           int         `json:"status"`
		LikesCount       int         `json:"likes_count"`
		CommentsCount    int         `json:"comments_count"`
		ContentUpdatedAt time.Time   `json:"content_updated_at"`
		DeletedAt        interface{} `json:"deleted_at"`
		CreatedAt        time.Time   `json:"created_at"`
		UpdatedAt        time.Time   `json:"updated_at"`
		PublishedAt      time.Time   `json:"published_at"`
		FirstPublishedAt time.Time   `json:"first_published_at"`
		WordCount        int         `json:"word_count"`
		Serializer       string      `json:"_serializer"`
		ActionType       string      `json:"action_type"`
		Publish          bool        `json:"publish"`
		Path             string      `json:"path"`
	} `json:"data"`
}
